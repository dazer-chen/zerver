package filter

import (
	"sync"

	"github.com/cosiner/zerver"
)

type (
	// RequestId is a simple filter prevent application/user from overlap request
	// the request id is generated by client itself or other server components.
	RequestId struct {
		Store         IDStore
		HeaderName    string
		PassingOnNoId bool
		Error         string
		ErrorOverlap  string
	}

	IDStore interface {
		Exist(ip, id string) bool
		Save(ip, id string)
		Remove(ip, id string)
	}

	MemIDStore struct {
		requests map[string]map[string]struct{} // [ip][id]exist
		lock     sync.RWMutex
	}
)

func NewMemIDStore() IDStore {
	return &MemIDStore{
		requests: make(map[string]map[string]struct{}),
	}
}

func (m *MemIDStore) Exist(ip, id string) bool {
	var (
		ids   map[string]struct{}
		exist bool
	)
	m.lock.RLock()
	if ids, exist = m.requests[ip]; exist {
		_, exist = ids[id]
	}
	m.lock.RUnlock()
	return exist
}

func (m *MemIDStore) Save(ip, id string) {
	m.lock.Lock()
	ids := m.requests[ip]
	if ids == nil {
		ids = make(map[string]struct{})
		m.requests[ip] = ids
	}
	ids[id] = struct{}{}
	m.lock.Unlock()
}

func (m *MemIDStore) Remove(ip, id string) {
	m.lock.Lock()
	delete(m.requests[ip], id)
	m.lock.Unlock()
}

func (ri *RequestId) Init(zerver.Enviroment) error {
	if ri.Store == nil {
		ri.Store = NewMemIDStore()
	}
	if ri.HeaderName == "" {
		ri.HeaderName = "X-Request-Id"
	}
	if ri.Error == "" {
		ri.Error = "header value X-Request-Id can't be empty"
	}
	if ri.ErrorOverlap == "" {
		ri.ErrorOverlap = "request already accepted before, please wait"
	}
	return nil
}

func (ri *RequestId) Filter(req zerver.Request, resp zerver.Response, chain zerver.FilterChain) {
	if req.Method() == "GET" {
		chain(req, resp)
		return
	}
	reqId := req.Header(ri.HeaderName)
	if reqId == "" {
		if ri.PassingOnNoId {
			chain(req, resp)
		} else {
			resp.ReportBadRequest()
			resp.Send("error", ri.Error)
		}
	} else {
		ip := req.RemoteIP()
		if ri.Store.Exist(ip, reqId) {
			resp.ReportForbidden()
			resp.Send("error", ri.ErrorOverlap)
			return
		}
		ri.Store.Save(ip, reqId)
		chain(req, resp)
		ri.Store.Remove(ip, reqId)
	}
}

func (ri *RequestId) Destroy() {}
